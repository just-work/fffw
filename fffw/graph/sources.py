from typing import Iterable, Optional, List, Any

from fffw.graph.base import VIDEO, AUDIO
from fffw.graph import base

__all__ = [
    'SourceFile',
    'LavfiSource',
]


class BaseSource:
    """ Source signal base class."""

    def __init__(self, video_streams: int = 1, audio_streams: int = 1) -> None:
        self.video_streams = video_streams
        self.audio_streams = audio_streams


class SourceFile(BaseSource):
    """ Describes video/audio streams in an input file."""

    def __init__(self,
                 filename: str,
                 video_streams: int = 1,
                 audio_streams: int = 1) -> None:
        super(SourceFile, self).__init__(video_streams=video_streams,
                                         audio_streams=audio_streams)
        self.filename = filename

    def __str__(self) -> str:
        return self.filename

    def get_args(self) -> List[str]:
        return ['-i', str(self)]


class LavfiSource(BaseSource):
    """ Describes video or audio stream generated by lavfi library."""

    def __init__(self, name: str, kind: base.StreamType,
                 video_streams: Optional[int] = None,
                 audio_streams: Optional[int] = None,
                 **opts: Any) -> None:
        if video_streams is None:
            video_streams = int(kind == VIDEO)
        if audio_streams is None:
            audio_streams = int(kind == AUDIO)
        super(LavfiSource, self).__init__(video_streams, audio_streams)
        self.name = name
        self.opts = opts

    def __str__(self) -> str:
        if not self.opts:
            return self.name
        opts = ':'.join('%s=%s' % t for t in sorted(self.opts.items()))
        return '%s=%s' % (self.name, opts)

    def get_args(self) -> List[str]:
        return ['-f', 'lavfi', '-i', str(self)]


class Input:
    """ Input streams grouper helpers."""

    def __init__(self,
                 streams: Iterable[base.Source] = (),
                 kind: Optional[base.StreamType] = None) -> None:
        assert kind in (VIDEO, AUDIO)
        self.streams = list(streams) or []
        self.kind = kind

    def connect_source(self, other: base.Source) -> None:
        """ Add and input stream to streams."""
        assert isinstance(other, base.Source)
        self.streams.append(other)

    def connect_dest(self, other: base.Node) -> base.Node:
        """ Connects first free input to a filter
        :param other: filter
        :return filter connected to an input
        """
        assert isinstance(other, base.Node)
        input_map = getattr(other, 'map', None)
        for stream in self.streams:
            try:
                stream_name = stream.name
            except RuntimeError:
                # skip streams not present in input file
                continue

            if input_map and input_map == stream_name:
                return stream.connect(other)
            if stream.edge is None:
                return stream.connect(other)
        raise IndexError("No free sources")

    def __or__(self, other: base.Node) -> base.Node:
        """
        Connects first free input to a filter.
        """
        if not isinstance(other, base.Node):
            return NotImplemented
        return self.connect_dest(other)

    def __lt__(self, other: base.Source) -> None:
        """
        Adds an input stream to input
        """
        if not isinstance(other, base.Source):
            return NotImplemented
        return self.connect_source(other)
